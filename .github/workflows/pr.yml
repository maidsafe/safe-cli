name: PR

on: [pull_request]

env:
  RUST_BACKTRACE: 1
  RUSTFLAGS: "-D warnings"

jobs:
  clippy:
    name: Rustfmt-Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-targets --all-features

  build-ffi-android:
    name: Build FFI Android
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [armv7-linux-androideabi, x86_64-linux-android]
        type: [dev, prod]
    env:
      SAFE_API_BUILD_COMPONENT: safe-ffi
      SAFE_API_BUILD_TYPE: ${{ matrix.type }}
      SAFE_API_BUILD_TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v1
      - shell: bash
        run: make build-component

  build-ffi-ios:
    name: Build FFI iOS
    runs-on: macOS-latest
    strategy:
      matrix:
        target: [aarch64-apple-ios, x86_64-apple-ios]
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --manifest-path=safe-ffi/Cargo.toml --target=${{ matrix.target }}
      # Upload for build-ffi-ios-universal
      - uses: actions/upload-artifact@master
        with:
          name: safe-ffi-${{ matrix.target }}-prod
          path: target/${{ matrix.target }}/release/libsafe_ffi.a
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --manifest-path=safe-ffi/Cargo.toml --target=${{ matrix.target }} --features=mock-network
      # Upload for build-ffi-ios-universal
      - uses: actions/upload-artifact@master
        with:
          name: safe-ffi-${{ matrix.target }}-dev
          path: target/${{ matrix.target }}/release/libsafe_ffi.a

  # Use a single job for each type to build all targets.
  build-ffi-ios-universal:
    name: Build FFI iOS Universal
    runs-on: macos-latest
    needs: build-ffi-ios
    strategy:
      matrix:
        type: [dev, prod]
    steps:
      - uses: actions/checkout@v1
      - uses: actions/download-artifact@master
        with:
          name: safe-ffi-x86_64-apple-ios-${{ matrix.type }}
          path: artifacts/safe-ffi/${{ matrix.type }}/x86_64-apple-ios/release
      - uses: actions/download-artifact@master
        with:
          name: safe-ffi-aarch64-apple-ios-${{ matrix.type }}
          path: artifacts/safe-ffi/${{ matrix.type }}/aarch64-apple-ios/release
      - shell: bash
        run: make universal-ios-lib-${{ matrix.type }}

  test-component:
    name: Test Component
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        component: [api-tests, cli-tests, e2e-authd-mock-tests, e2e-authd-vault-tests]
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - shell: bash
        run: ./resources/test-scripts/${{ matrix.component }}
