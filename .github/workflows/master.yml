name: Master

on:
  push:
    branches:
      - master

env:
  # Run all cargo commands with --verbose.
  CARGO_TERM_VERBOSE: true
  RUST_BACKTRACE: 1

jobs:
  build-cli-authd:
    if: ${{ github.repository_owner == 'maidsafe' }}
    name: Build Component
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        component: [sn_cli, sn_authd]
        include:
          - os: ubuntu-latest
            component: sn_cli
            target: safe
            output: safe-x86_64-unknown-linux-musl
          - os: ubuntu-latest
            component: sn_authd
            target: sn_authd
            output: sn_authd-x86_64-unknown-linux-musl
          - os: windows-latest
            component: sn_cli
            target: safe.exe
            output: safe-x86_64-pc-windows-msvc
          - os: windows-latest
            component: sn_authd
            target: sn_authd.exe
            output: sn_authd-x86_64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      # Cache.
      - name: Cargo cache registry, index and build
        uses: actions/cache@v2.1.4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-cache-${{ hashFiles('**/Cargo.lock') }}

      # Build on Ubuntu
      - name: Build Ubuntu
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          sudo apt update -y && sudo apt install -y musl-tools
          rustup target add x86_64-unknown-linux-musl
          cargo build --release --manifest-path=${{ matrix.component }}/Cargo.toml --target x86_64-unknown-linux-musl

      # Build on Windows
      - name: Build Windows
        if: matrix.os == 'windows-latest'
        run: cargo build --release --manifest-path=${{ matrix.component }}/Cargo.toml

      # Upload Ubuntu
      - name: Upload Ubuntu Builds
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.output }}
          path: target/x86_64-unknown-linux-musl/release/${{ matrix.target }}

      # Upload Windows
      - name: Upload Windows Builds
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.output }}
          path: target/release/${{ matrix.target }}


  build-mac-cli-authd:
    if: ${{ github.repository_owner == 'maidsafe' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        component: [sn_cli, sn_authd]
        include:
          - os: macos-latest
            component: sn_cli
            target: safe
            output: safe-x86_64-apple-darwin
          - os: macos-latest
            component: sn_authd
            target: sn_authd
            output: sn_authd-x86_64-apple-darwin
    env:
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_SIGN_ID: ${{ secrets.APPLE_SIGN_ID }}
      APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
      CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
      CSC_LINK: ${{ secrets.CSC_LINK }}
      CSC_IDENTITY_AUTO_DISCOVERY : true
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      # Cache.
      - name: Cargo cache registry, index and build
        uses: actions/cache@v2.1.4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-cache-${{ hashFiles('**/Cargo.lock') }}

      # Build
      - name: Build
        run: cargo build --release --manifest-path=${{ matrix.component }}/Cargo.toml

      # Sign & Notarize
      - name: Sign & Notarize
        shell: bash
        run: ./resources/notarize.sh ${{ matrix.target }}

      # List contents of release folder
      - name: what is in release...
        shell: bash
        run: ls target/release

      # Upload
      - name: Upload
        uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.output }}
          path: target/release/${{ matrix.target }}


  # Unfortunately, for artifact retrieval, there's not really a way to avoid having this huge list of
  # 'download-artifact' actions. We could perhaps implement our own 'retrieve all build artifacts'
  # action.
  deploy:
    if: ${{ github.repository_owner == 'maidsafe' }}
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build-cli-authd, build-mac-cli-authd]
    env:
      AWS_ACCESS_KEY_ID: AKIAVVODCRMSJ5MV63VB
      AWS_SECRET_ACCESS_KEY: ${{ secrets.DEPLOY_USER_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: eu-west-2
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      # Checkout and get all the artifacts built in the previous jobs.
      - uses: actions/checkout@v2
      # cli
      - name: Download safe-x86_64-pc-windows-msvc release
        uses: actions/download-artifact@master
        with:
          name: safe-x86_64-pc-windows-msvc
          path: artifacts/sn_cli/prod/x86_64-pc-windows-msvc/release
      - name: Download safe-x86_64-unknown-linux-musl release
        uses: actions/download-artifact@master
        with:
          name: safe-x86_64-unknown-linux-musl
          path: artifacts/sn_cli/prod/x86_64-unknown-linux-musl/release
      - name: Download safe-x86_64-apple-darwin release
        uses: actions/download-artifact@master
        with:
          name: safe-x86_64-apple-darwin
          path: artifacts/sn_cli/prod/x86_64-apple-darwin/release

      # authd
      - name: Download sn_authd-x86_64-pc-windows-msvc release
        uses: actions/download-artifact@master
        with:
          name: sn_authd-x86_64-pc-windows-msvc
          path: artifacts/sn_authd/prod/x86_64-pc-windows-msvc/release
      - name: Download sn_authd-x86_64-unknown-linux-musl release
        uses: actions/download-artifact@master
        with:
          name: sn_authd-x86_64-unknown-linux-musl
          path: artifacts/sn_authd/prod/x86_64-unknown-linux-musl/release
      - name: Download sn_authd-x86_64-apple-darwin release
        uses: actions/download-artifact@master
        with:
          name: sn_authd-x86_64-apple-darwin
          path: artifacts/sn_authd/prod/x86_64-apple-darwin/release

      # Get information for the release.
      - shell: bash
        id: commit_message
        run: |
          commit_message=$(git log --format=%B -n 1 ${{ github.sha }})
          echo "::set-output name=commit_message::$commit_message"
      - shell: bash
        id: versioning
        run: |
          api_version=$(grep "^version" < sn_api/Cargo.toml | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          cli_version=$(grep "^version" < sn_cli/Cargo.toml | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          authd_version=$(grep "^version" < sn_authd/Cargo.toml | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          qjsonrpc_version=$(grep "^version" < qjsonrpc/Cargo.toml | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          echo "::set-output name=api_version::$api_version"
          echo "::set-output name=cli_version::$cli_version"
          echo "::set-output name=authd_version::$authd_version"
          echo "::set-output name=qjsonrpc_version::$qjsonrpc_version"

      # Create `deploy` directory and put the artifacts into tar/zip archives for deployment with the release.
      - name: chmod
        shell: bash
        run: chmod -R +x artifacts/sn_authd
      - name: chmod
        shell: bash
        run: chmod -R +x artifacts/sn_cli
      - shell: bash
        run: make package-commit_hash-artifacts-for-deploy
        if: "!startsWith(steps.commit_message.outputs.commit_message, 'Version change')"
      - shell: bash
        run: make package-version-artifacts-for-deploy
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      # Get release description (requires generated archives)
      - shell: bash
        id: release_description
        run: |
          description=$(./resources/get_release_description.sh ${{ steps.versioning.outputs.api_version }} ${{ steps.versioning.outputs.cli_version }}  ${{ steps.versioning.outputs.authd_version }})
          description="${description//'%'/'%25'}"
          description="${description//$'\n'/'%0A'}"
          description="${description//$'\r'/'%0D'}"
          echo "::set-output name=description::$description"
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')

      # Upload all the release archives to S3;
      - name: Upload prod to S3
        run: aws s3 sync deploy/prod s3://sn-api --size-only --acl public-read

      # Create the release and attach sn_cli archives as assets.
      - uses: csexton/create-release@add-body
        id: create_release
        with:
          tag_name: v${{ steps.versioning.outputs.cli_version }}
          release_name: sn_cli
          draft: false
          prerelease: false
          body: ${{ steps.release_description.outputs.description }}
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_cli-${{ steps.versioning.outputs.cli_version }}-x86_64-unknown-linux-musl.zip
          asset_name: sn_cli-${{ steps.versioning.outputs.cli_version }}-x86_64-unknown-linux-musl.zip
          asset_content_type: application/zip
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_cli-${{ steps.versioning.outputs.cli_version }}-x86_64-pc-windows-msvc.zip
          asset_name: sn_cli-${{ steps.versioning.outputs.cli_version }}-x86_64-pc-windows-msvc.zip
          asset_content_type: application/zip
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_cli-${{ steps.versioning.outputs.cli_version }}-x86_64-apple-darwin.zip
          asset_name: sn_cli-${{ steps.versioning.outputs.cli_version }}-x86_64-apple-darwin.zip
          asset_content_type: application/zip
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_cli-${{ steps.versioning.outputs.cli_version }}-x86_64-unknown-linux-musl.tar.gz
          asset_name: sn_cli-${{ steps.versioning.outputs.cli_version }}-x86_64-unknown-linux-musl.tar.gz
          asset_content_type: application/zip
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_cli-${{ steps.versioning.outputs.cli_version }}-x86_64-pc-windows-msvc.tar.gz
          asset_name: sn_cli-${{ steps.versioning.outputs.cli_version }}-x86_64-pc-windows-msvc.tar.gz
          asset_content_type: application/zip
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/sn_cli-${{ steps.versioning.outputs.cli_version }}-x86_64-apple-darwin.tar.gz
          asset_name: sn_cli-${{ steps.versioning.outputs.cli_version }}-x86_64-apple-darwin.tar.gz
          asset_content_type: application/zip
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')

  # Automatic publish, triggered by a commit starting with "Version change".
  publish:
    if: ${{ github.repository_owner == 'maidsafe' }}
    name: Publish
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - shell: bash
        id: commit_message
        run: |
          commit_message=$(git log --format=%B -n 1 ${{ github.sha }})
          echo "::set-output name=commit_message::$commit_message"
      - shell: bash
        id: versioning
        run: |
          jsonrpc_version=$(grep "^version" < qjsonrpc/Cargo.toml | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          api_version=$(grep "^version" < sn_api/Cargo.toml | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          old_jsonrpc_version=$(cargo search qjsonrpc --limit 1 | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          old_api_version=$(cargo search sn_api --limit 1 | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          echo "Current qjsonrpc version: $jsonrpc_version"
          echo "Current sn_api version: $api_version"
          echo "Old qjsonrpc version: $old_jsonrpc_version"
          echo "Old sn_api version: $old_api_version"
          echo "::set-output name=jsonrpc_version::$jsonrpc_version"
          echo "::set-output name=api_version::$api_version"
          echo "::set-output name=old_jsonrpc_version::$old_jsonrpc_version"
          echo "::set-output name=old_api_version::$old_api_version"
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions-rs/cargo@v1
        with:
          command: login
          args: ${{ secrets.CRATES_IO_TOKEN }}
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --manifest-path=qjsonrpc/Cargo.toml
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change') && steps.versioning.outputs.jsonrpc_version != steps.versioning.outputs.old_jsonrpc_version
      # Sleep between publishes, crates.io needs some time after publishing a new version before it reports its existence.
      - shell: bash
        name: Sleep
        run: sleep 120
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change') && steps.versioning.outputs.jsonrpc_version != steps.versioning.outputs.old_jsonrpc_version
      - uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --manifest-path=sn_api/Cargo.toml
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change') && steps.versioning.outputs.api_version != steps.versioning.outputs.old_api_version
