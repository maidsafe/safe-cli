name: Master

on:
  push:
    branches:
      - master

env:
  # Run all cargo commands with --verbose.
  CARGO_TERM_VERBOSE: true
  RUST_BACKTRACE: 1

jobs:
  build-cli-authd:
    name: Build Component
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        component: [safe-cli, safe-authd]
        include:
          - os: ubuntu-latest
            component: safe-cli
            target: safe
            output: safe-x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            component: safe-authd
            target: safe-authd
            output: safe-authd-x86_64-unknown-linux-gnu
          - os: windows-latest
            component: safe-cli
            target: safe.exe
            output: safe-x86_64-pc-windows-gnu
          - os: windows-latest
            component: safe-authd
            target: safe-authd.exe
            output: safe-authd-x86_64-pc-windows-gnu
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      # Cache.
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      # Build
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --manifest-path=${{ matrix.component }}/Cargo.toml
      - uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.output }}
          path: target/release/${{ matrix.target }}

  build-ffi:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        component: [safe-ffi]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            output: libsafe_ffi.so
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            output: safe_ffi.dll
          - os: macOS-latest
            target: x86_64-apple-darwin
            output: libsafe_ffi.dylib
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      # Cache.
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      # Build.
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --manifest-path=${{ matrix.component }}/Cargo.toml
      - uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.component }}-${{ matrix.target }}-prod
          path: target/release/${{ matrix.output }}
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args:  >
            --release --manifest-path=${{ matrix.component }}/Cargo.toml
            --features=mock-network
      - uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.component }}-${{ matrix.target }}-dev
          path: target/release/${{ matrix.output }}

  build-mac-cli-authd:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        component: [safe-cli, safe-authd]
        include:
          - os: macos-latest
            component: safe-cli
            target: safe
            output: safe-x86_64-apple-darwin
          - os: macos-latest
            component: safe-authd
            target: safe-authd
            output: safe-authd-x86_64-apple-darwin
    env:
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_SIGN_ID: ${{ secrets.APPLE_SIGN_ID }}
      APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
      CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
      CSC_LINK: ${{ secrets.CSC_LINK }}
      CSC_IDENTITY_AUTO_DISCOVERY : true
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      # Cache.
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      # Build
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --manifest-path=${{ matrix.component }}/Cargo.toml
      - name: Sign & Notarize
        shell: bash
        run: ./resources/notarize.sh ${{ matrix.target }}
      - name: what is in release...
        shell: bash
        run: ls target/release
      - uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.output }}
          path: target/release/${{ matrix.target }}

  build-ffi-android:
    name: Build FFI Android
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [armv7-linux-androideabi, x86_64-linux-android]
        component: [safe-ffi]
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      # Cache.
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      # Check if NDK bundle is installed and list files.
      - name: Check Android NDK bundle
        shell: bash
        run: ls /usr/local/lib/android/sdk/ndk-bundle

      # Setup NDK build toolchain for arm.
      - if: matrix.target == 'armv7-linux-androideabi'
        name: Setup NDK toolchain for armv7
        shell: bash
        run: |
          mkdir toolchains
          /usr/local/lib/android/sdk/ndk-bundle/build/tools/make_standalone_toolchain.py --arch arm --api 21 --install-dir toolchains --force
          echo "::set-env name=CC_armv7_linux_androideabi::arm-linux-androideabi-clang"
          echo "::set-env name=CARGO_TARGET_ARMV7_LINUX_ANDROIDEABI_LINKER::arm-linux-androideabi-clang"
          echo "::add-path::$PWD/toolchains/bin"

      # Setup NDK build toolchain for x86_64.
      - if: matrix.target == 'x86_64-linux-android'
        name: Setup NDK toolchain for x86_64
        shell: bash
        run: |
          mkdir toolchains
          /usr/local/lib/android/sdk/ndk-bundle/build/tools/make_standalone_toolchain.py --arch x86_64 --api 21 --install-dir toolchains --force
          echo "::set-env name=CARGO_TARGET_X86_64_LINUX_ANDROID_LINKER::x86_64-linux-android-gcc"
          echo "::add-path::$PWD/toolchains/bin"

      # Verify installed NDK toolchain for the target.
      - name: Check Android NDK toolchain Files
        shell: bash
        run: ls toolchains
      - name: Download Android Build Toolchain
        shell: bash
        run:  rustup target add ${{matrix.target}}

      # Build prod native lib.
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --manifest-path=${{ matrix.component }}/Cargo.toml --target=${{ matrix.target }}

      # Upload prod native lib.
      - uses: actions/upload-artifact@master
        with:
          name: safe-ffi-${{ matrix.target }}-prod
          path: target/${{ matrix.target }}/release/libsafe_ffi.so

      # Build dev native lib.
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --release --manifest-path=${{ matrix.component }}/Cargo.toml --target=${{ matrix.target }}
            --features=mock-network

      # Upload dev native lib.
      - uses: actions/upload-artifact@master
        with:
          name: safe-ffi-${{ matrix.target }}-dev
          path: target/${{ matrix.target }}/release/libsafe_ffi.so

  build-ffi-ios:
    name: Build FFI iOS
    runs-on: macos-latest
    env:
      PKG_CONFIG_ALLOW_CROSS: 1
      DEVELOPER_DIR: /Applications/Xcode_11.2.app/Contents/Developer
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: aarch64-apple-ios
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: x86_64-apple-ios

      # Cache.
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

     # Install cargo-lipo to generate universal libs.
      - uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-lipo
      # Build prod universal library.
      - name: Build universal lib - Prod
        shell: bash
        run: cargo lipo --release --manifest-path=safe-ffi/Cargo.toml
      # Upload prod universal library.
      - uses: actions/upload-artifact@master
        with:
          name: safe-ffi-apple-ios-prod
          path: target/universal/release/libsafe_ffi.a
      # Build dev universal library.
      - name: Build universal lib - Dev
        shell: bash
        run: cargo lipo --release --manifest-path=safe-ffi/Cargo.toml --features=mock-network
      # Upload dev universal library.
      - uses: actions/upload-artifact@master
        with:
          name: safe-ffi-apple-ios-dev
          path: target/universal/release/libsafe_ffi.a

  # Unfortunately, for artifact retrieval, there's not really a way to avoid having this huge list of
  # 'download-artifact' actions. We could perhaps implement our own 'retrieve all build artifacts'
  # action.
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build-cli-authd, build-ffi, build-mac-cli-authd, build-ffi-android, build-ffi-ios]
    env:
      AWS_ACCESS_KEY_ID: AKIAVVODCRMSJ5MV63VB
      AWS_SECRET_ACCESS_KEY: ${{ secrets.DEPLOY_USER_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: eu-west-2
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      # Checkout and get all the artifacts built in the previous jobs.
      - uses: actions/checkout@v1
      # cli
      - uses: actions/download-artifact@master
        with:
          name: safe-x86_64-pc-windows-gnu
          path: artifacts/safe-cli/prod/x86_64-pc-windows-gnu/release
      - uses: actions/download-artifact@master
        with:
          name: safe-x86_64-unknown-linux-gnu
          path: artifacts/safe-cli/prod/x86_64-unknown-linux-gnu/release
      - uses: actions/download-artifact@master
        with:
          name: safe-x86_64-apple-darwin
          path: artifacts/safe-cli/prod/x86_64-apple-darwin/release

      # authd
      - uses: actions/download-artifact@master
        with:
          name: safe-authd-x86_64-pc-windows-gnu
          path: artifacts/safe-authd/prod/x86_64-pc-windows-gnu/release
      - uses: actions/download-artifact@master
        with:
          name: safe-authd-x86_64-unknown-linux-gnu
          path: artifacts/safe-authd/prod/x86_64-unknown-linux-gnu/release
      - uses: actions/download-artifact@master
        with:
          name: safe-authd-x86_64-apple-darwin
          path: artifacts/safe-authd/prod/x86_64-apple-darwin/release

      # ffi
      - uses: actions/download-artifact@master
        with:
          name: safe-ffi-x86_64-pc-windows-gnu-prod
          path: artifacts/safe-ffi/prod/x86_64-pc-windows-gnu/release
      - uses: actions/download-artifact@master
        with:
          name: safe-ffi-x86_64-pc-windows-gnu-dev
          path: artifacts/safe-ffi/dev/x86_64-pc-windows-gnu/release
      - uses: actions/download-artifact@master
        with:
          name: safe-ffi-x86_64-unknown-linux-gnu-prod
          path: artifacts/safe-ffi/prod/x86_64-unknown-linux-gnu/release
      - uses: actions/download-artifact@master
        with:
          name: safe-ffi-x86_64-unknown-linux-gnu-dev
          path: artifacts/safe-ffi/dev/x86_64-unknown-linux-gnu/release
      - uses: actions/download-artifact@master
        with:
          name: safe-ffi-x86_64-apple-darwin-prod
          path: artifacts/safe-ffi/prod/x86_64-apple-darwin/release
      - uses: actions/download-artifact@master
        with:
          name: safe-ffi-x86_64-apple-darwin-dev
          path: artifacts/safe-ffi/dev/x86_64-apple-darwin/release
      - uses: actions/download-artifact@master
        with:
          name: safe-ffi-armv7-linux-androideabi-prod
          path: artifacts/safe-ffi/prod/armv7-linux-androideabi/release
      - uses: actions/download-artifact@master
        with:
          name: safe-ffi-armv7-linux-androideabi-dev
          path: artifacts/safe-ffi/dev/armv7-linux-androideabi/release
      - uses: actions/download-artifact@master
        with:
          name: safe-ffi-x86_64-linux-android-prod
          path: artifacts/safe-ffi/prod/x86_64-linux-android/release
      - uses: actions/download-artifact@master
        with:
          name: safe-ffi-x86_64-linux-android-dev
          path: artifacts/safe-ffi/dev/x86_64-linux-android/release
      - uses: actions/download-artifact@master
        with:
          name: safe-ffi-apple-ios-prod
          path: artifacts/safe-ffi/prod/apple-ios/release
      - uses: actions/download-artifact@master
        with:
          name: safe-ffi-apple-ios-dev
          path: artifacts/safe-ffi/dev/apple-ios/release

      # Get information for the release.
      - shell: bash
        id: commit_message
        run: |
          commit_message=$(git log --format=%B -n 1 ${{ github.sha }})
          echo "::set-output name=commit_message::$commit_message"
      - shell: bash
        id: versioning
        run: |
          api_version=$(grep "^version" < safe-api/Cargo.toml | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          cli_version=$(grep "^version" < safe-cli/Cargo.toml | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          authd_version=$(grep "^version" < safe-authd/Cargo.toml | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          ffi_version=$(grep "^version" < safe-ffi/Cargo.toml | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          echo "::set-output name=api_version::$api_version"
          echo "::set-output name=cli_version::$cli_version"
          echo "::set-output name=authd_version::$authd_version"
          echo "::set-output name=ffi_version::$ffi_version"

      # Create `deploy` directory and put the artifacts into tar/zip archives for deployment with the release.
      - name: chmod
        shell: bash
        run: chmod -R +x artifacts/safe-authd
      - name: chmod
        shell: bash
        run: chmod -R +x artifacts/safe-cli
      - shell: bash
        run: make package-commit_hash-artifacts-for-deploy
        if: "!startsWith(steps.commit_message.outputs.commit_message, 'Version change')"
      - shell: bash
        run: make package-version-artifacts-for-deploy
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      # Get release description (requires generated archives)
      - shell: bash
        id: release_description
        run: |
          description=$(./resources/get_release_description.sh ${{ steps.versioning.outputs.api_version }} ${{ steps.versioning.outputs.cli_version }} ${{ steps.versioning.outputs.ffi_version }} ${{ steps.versioning.outputs.authd_version }})
          description="${description//'%'/'%25'}"
          description="${description//$'\n'/'%0A'}"
          description="${description//$'\r'/'%0D'}"
          echo "::set-output name=description::$description"
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')

      # Upload all the release archives to S3; FFI links will be in the release description.
      - uses: actions/aws/cli@master
        with:
          args: s3 sync deploy/prod s3://safe-api --acl public-read
      - uses: actions/aws/cli@master
        with:
          args: s3 sync deploy/dev s3://safe-api --acl public-read

      # Create the release and attach safe-cli archives as assets.
      - uses: csexton/create-release@add-body
        id: create_release
        with:
          tag_name: ${{ steps.versioning.outputs.cli_version }}
          release_name: safe-cli
          draft: false
          prerelease: false
          body: ${{ steps.release_description.outputs.description }}
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/safe-cli-${{ steps.versioning.outputs.cli_version }}-x86_64-unknown-linux-gnu.zip
          asset_name: safe-cli-${{ steps.versioning.outputs.cli_version }}-x86_64-unknown-linux-gnu.zip
          asset_content_type: application/zip
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/safe-cli-${{ steps.versioning.outputs.cli_version }}-x86_64-pc-windows-gnu.zip
          asset_name: safe-cli-${{ steps.versioning.outputs.cli_version }}-x86_64-pc-windows-gnu.zip
          asset_content_type: application/zip
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/safe-cli-${{ steps.versioning.outputs.cli_version }}-x86_64-apple-darwin.zip
          asset_name: safe-cli-${{ steps.versioning.outputs.cli_version }}-x86_64-apple-darwin.zip
          asset_content_type: application/zip
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/safe-cli-${{ steps.versioning.outputs.cli_version }}-x86_64-unknown-linux-gnu.tar.gz
          asset_name: safe-cli-${{ steps.versioning.outputs.cli_version }}-x86_64-unknown-linux-gnu.tar.gz
          asset_content_type: application/zip
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/safe-cli-${{ steps.versioning.outputs.cli_version }}-x86_64-pc-windows-gnu.tar.gz
          asset_name: safe-cli-${{ steps.versioning.outputs.cli_version }}-x86_64-pc-windows-gnu.tar.gz
          asset_content_type: application/zip
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/prod/safe-cli-${{ steps.versioning.outputs.cli_version }}-x86_64-apple-darwin.tar.gz
          asset_name: safe-cli-${{ steps.versioning.outputs.cli_version }}-x86_64-apple-darwin.tar.gz
          asset_content_type: application/zip
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')

  # Automatic publish, triggered by a commit starting with "Version change".
  publish:
    name: Publish
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - shell: bash
        id: commit_message
        run: |
          commit_message=$(git log --format=%B -n 1 ${{ github.sha }})
          echo "::set-output name=commit_message::$commit_message"
      - shell: bash
        id: versioning
        run: |
          jsonrpc_version=$(grep "^version" < jsonrpc-quic/Cargo.toml | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          api_version=$(grep "^version" < safe-api/Cargo.toml | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          old_jsonrpc_version=$(cargo search jsonrpc-quic --limit 1 | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          old_api_version=$(cargo search safe-api --limit 1 | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
          echo "Current jsonrpc-quic version: $jsonrpc_version"
          echo "Current safe-api version: $api_version"
          echo "Old jsonrpc-quic version: $old_jsonrpc_version"
          echo "Old safe-api version: $old_api_version"
          echo "::set-output name=jsonrpc_version::$jsonrpc_version"
          echo "::set-output name=api_version::$api_version"
          echo "::set-output name=old_jsonrpc_version::$old_jsonrpc_version"
          echo "::set-output name=old_api_version::$old_api_version"
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions-rs/cargo@v1
        with:
          command: login
          args: ${{ secrets.CRATES_IO_TOKEN }}
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change')
      - uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --manifest-path=jsonrpc-quic/Cargo.toml
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change') && steps.versioning.outputs.jsonrpc_version != steps.versioning.outputs.old_jsonrpc_version
      # Sleep between publishes, crates.io needs some time after publishing a new version before it reports its existence.
      - shell: bash
        name: Sleep
        run: sleep 120
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change') && steps.versioning.outputs.jsonrpc_version != steps.versioning.outputs.old_jsonrpc_version
      - uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --manifest-path=safe-api/Cargo.toml
        if: startsWith(steps.commit_message.outputs.commit_message, 'Version change') && steps.versioning.outputs.api_version != steps.versioning.outputs.old_api_version
