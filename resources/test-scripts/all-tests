#!/bin/bash

if [ -z $RANDOM_PORT_NUMBER ]
then
  export RANDOM_PORT_NUMBER=41805
fi

if [ -z $SAFE_MOCK_VAULT_PATH ]
then
  export SAFE_MOCK_VAULT_PATH=~/safe_auth
fi

function setup_safe_auth() {
    rm -rf $SAFE_MOCK_VAULT_PATH
    git clone https://github.com/maidsafe/safe-authenticator-cli.git $SAFE_MOCK_VAULT_PATH
    (
        cd $SAFE_MOCK_VAULT_PATH
        SAFE_AUTH_SECRET=a SAFE_AUTH_PASSWORD=b cargo run --features=mock-network -- -i nonsense || true
        echo "Launching safe_auth daemon on port:" $RANDOM_PORT_NUMBER
        SAFE_AUTH_SECRET=a SAFE_AUTH_PASSWORD=b cargo run --features=mock-network -- --daemon $RANDOM_PORT_NUMBER --allow-all-auth &
        sleep 15
        cd -
    )
}

set -e -x

# first setup auth CLI
setup_safe_auth

# run tests with CLI's own mock
cargo test --release --features=scl-mock -- --test-threads=1

# run the unit tests with SCL's mock-network, with fake-auth
cargo test --lib --release --features=mock-network,fake-auth -- --test-threads=1

# run the doc tests now with SCL's mock-network, with fake-auth
cargo test --doc --release --features=mock-network,fake-auth -- --test-threads=1

# now let's run the integration tests but without fake-auth, using the safe_auth CLI to get credentials
# get auth credentials which will be then used by the integration tests to connect to mock-network
echo "Sending auth request to port:" $RANDOM_PORT_NUMBER
cargo run --release --features=mock-network -- auth --port $RANDOM_PORT_NUMBER

# we can now run each of the integration tests suite
cargo test --release --features=mock-network --test cli_cat -- --test-threads=1
cargo test --release --features=mock-network --test cli_files -- --test-threads=1
cargo test --release --features=mock-network --test cli_keys -- --test-threads=1
cargo test --release --features=mock-network --test cli_wallet -- --test-threads=1
cargo test --release --features=mock-network --test cli_nrs -- --test-threads=1
